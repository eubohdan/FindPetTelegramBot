from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from database import db_sqlite as db
import callback_factories as cf

main_buttons_text = ['üêæ–í—ã–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞', 'ü´∂–•–æ—á—É –ø–æ–º–æ—á—å', 'üè°–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏']
admin_button_text = '–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞'


async def main_buttons(is_admin: bool) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for item in main_buttons_text:
        builder.button(text=item)
    if is_admin:
        builder.button(text=admin_button_text)
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True,
                             input_field_placeholder='–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É')


kb_about_me = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='‚úçÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞', url='https://t.me/id7489')],
                     [InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='hide')]])


async def kb_orgs(action: str) -> InlineKeyboardMarkup:
    '''–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'''
    builder = InlineKeyboardBuilder()
    orgs = db.get_org_names()
    for i in range(len(orgs)):
        builder.button(text=orgs[i][1], callback_data=cf.InfoCallbackFactory(action=action, value=orgs[i][0]))
    if action == 'description':
        builder.button(text='–°–∫—Ä—ã—Ç—å', callback_data='hide')
    else:
        builder.button(text='–ù–∞–∑–∞–¥', callback_data='help')
    builder.adjust(1)
    return builder.as_markup()


async def kb_org_socials(row_id: str, user_id: int) -> InlineKeyboardMarkup:
    '''–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∞–¥–º–∏–Ω–∞'''
    builder = InlineKeyboardBuilder()
    socials = db.get_org_social(row_id)
    for item in socials.items():
        builder.add(InlineKeyboardButton(text=item[0], url=item[1]))
    # if await is_admin_silent(userid): # –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–≥—É—Ç –≤—Å–µ –∞–¥–º–∏–Ω—ã –∏–∑ —á–∞—Ç–∞
    if str(user_id) == db.get_org_info(data_type='admin_id', row_id=row_id):  # –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω
        builder.add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'orgedit|{row_id}|menu'))
    builder.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='orgs'))
    builder.adjust(2)
    return builder.as_markup()


async def kb_edit_org(row_id: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–§–æ—Ç–æ', callback_data=f'orgedit|{row_id}|photo')  # !!
    builder.button(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'orgedit|{row_id}|description')  # !!
    builder.button(text='–û—Ç–º–µ–Ω–∞', callback_data=cf.InfoCallbackFactory(action='description', value=row_id))
    builder.adjust(2)
    return builder.as_markup()


kb_cancel_edit = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏', callback_data='cancelFSM')]])


kb_cancel_edit2 = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—É–Ω–∫—Ç—É', callback_data='prevFSM')], [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏', callback_data='cancelFSM')]])


kb_help_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='üè†–ü–µ—Ä–µ–¥–µ—Ä–∂–∫–∞', callback_data='keep'),
                      InlineKeyboardButton(text='üöó–ê–≤—Ç–æ–ø–æ–º–æ—â—å', callback_data='auto')],
                     [InlineKeyboardButton(text='üßΩ–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ', callback_data='help|volunteer_help'),
                      InlineKeyboardButton(text='üí≥–§–∏–Ω–∞–Ω—Å–æ–≤–æ', callback_data='help|financial_help')],
                     [InlineKeyboardButton(text='üçñ–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ', callback_data='help|material_help'),
                      InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='hide')]])


async def kb_search_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for num, item in enumerate(['üê±–ö–æ—Ç—è—Ç–∞', 'üê∂–©–µ–Ω–∫–∏', 'üêà–ö–æ—à–∫–∏', 'üêï–°–æ–±–∞–∫–∏']):
        builder.button(text=item, callback_data=cf.SearchCallbackFactory(pet_type=num, page=0, action='scrolling'))
    builder.button(text='–°–∫—Ä—ã—Ç—å', callback_data='hide')
    builder.adjust(2)
    return builder.as_markup()


async def scrolling_kb(pet_type: int, page: int, pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–ó–∞–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='sure'))
    builder.button(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='post'))
    builder.button(text='<-- –ù–∞–∑–∞–¥', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=(page - 1) % pages,
                                                                            action='scrolling'))
    builder.button(text=f'{page + 1}/{pages}',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='pointer'))
    builder.button(text='–í–ø–µ—Ä–µ–¥ -->', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=(page + 1) % pages,
                                                                             action='scrolling'))
    builder.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='search')
    builder.adjust(1, 1, 3, 1)
    return builder.as_markup()


async def pet_choosed_kb(pet_type: int, page: int, is_admin: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if is_admin:
        builder.button(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                       callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit'))
        builder.button(text='–£–¥–∞–ª–∏—Ç—å',
                       callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='delete_sure'))
    else:
        builder.button(text='–ó–∞–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞',
                       callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='sure'))
    builder.button(text='–ù–∞–∑–∞–¥',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='scrolling'))
    builder.adjust(2, 1) if is_admin else builder.adjust(1)
    return builder.as_markup()


async def pet_choosed_sure(pet_type: int, page: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='request'))
    builder.button(text='–ù–∞–∑–∞–¥',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='scrolling'))
    return builder.as_markup()


async def pet_delete_sure(pet_type: int, page: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–£–¥–∞–ª–∏—Ç—å',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='delete'))
    builder.button(text='–ù–µ —É–¥–∞–ª—è—Ç—å',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='post'))
    return builder.as_markup()


async def pet_was_deleted(pet_type: int, page: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–ö —Å–ø–∏—Å–∫—É –ø–∏—Ç–æ–º—Ü–µ–≤',
                   callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='scrolling'))
    return builder.as_markup()


async def what_to_edit(pet_type: int, page: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–§–æ—Ç–æ', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit', additional='img'))
    builder.button(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit', additional='description'))
    builder.button(text='–í–æ–∑—Ä–∞—Å—Ç', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit', additional='age'))
    builder.button(text='–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit', additional='sterilized'))
    builder.button(text='–ú–µ—Å—Ç–æ', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit', additional='place'))
    builder.button(text='–ö—É—Ä–∞—Ç–æ—Ä', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit', additional='curator'))
    builder.button(text='–ù—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–¥–µ—Ä–∂–∫–∞', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='edit', additional='needs_temp_keeping'))
    builder.button(text='–ù–∞–∑–∞–¥', callback_data=cf.SearchCallbackFactory(pet_type=pet_type, page=page, action='post'))
    builder.adjust(2, 2, 2, 1, 1)
    return builder.as_markup()


async def kb_help_org(action: str, row_id: str, user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    admin = db.get_org_info(data_type='admin_id', row_id=row_id)  # –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω
    if str(user_id) == admin:
        builder.add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'orgedit|{row_id}|{action}'))
    else:
        builder.row(InlineKeyboardButton(text='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–æ—â—å',
                                         url=f"tg://user?id={admin}"))  # !!! –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ —É –∞–¥–º–∏–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    builder.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'help|{action}'))
    return builder.as_markup()


kb_temp_keeping = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='üêæ–í–∑—è—Ç—å –Ω–∞ –ø–µ—Ä–µ–¥–µ—Ä–∂–∫—É', callback_data='search')],
                     [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='help')]])

kb_auto_help = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data='in_dev')],
                     [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='help')]])


pet_type_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=i) for i in db.pet_type]],
                resize_keyboard=True, one_time_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')

pet_sex_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=i) for i in db.pet_sex]],
                resize_keyboard=True, one_time_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')

pet_bool_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=i) for i in db.bool_answer]],
                resize_keyboard=True, one_time_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')


async def pet_place_kb() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for name in [i[1] for i in db.get_org_names()]:
        builder.button(text=name)
    builder.button(text='–ì—É—Ä—Å–∫–æ–≥–æ, 42')
    builder.button(text='–ü–µ—Ä–µ–¥–µ—Ä–∂–∫–∞')
    builder.adjust(2)
    return builder.as_markup()

