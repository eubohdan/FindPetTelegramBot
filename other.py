from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher, types
from config_reader import config
from create_bot import bot
from database.db_sqlite import pets_names_list
import keyboards as kb


async def is_admin(update: types.Update | types.Message | types.CallbackQuery) -> bool | None:
    '''–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–ø–¥–µ–π—Ç, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∞—Ö –≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'''
    admins = [item.user.id for item in await bot.get_chat_administrators(config.chat_id)]
    if update.from_user.id in admins:
        return True
    await bot.send_message(update.from_user.id, '<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                           reply_markup=await kb.main_buttons(is_admin=await is_admin_silent(userid=update.from_user.id)))


async def is_admin_silent(userid: int) -> bool:
    '''–ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω–∞—Ö –≥—Ä—É–ø–ø—ã'''
    admins = [item.user.id for item in await bot.get_chat_administrators(config.chat_id)]
    return userid in admins


async def hide_message(update: types.Update) -> None:
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö'''
    try:
        await update.message.delete()
    except Exception as e:
        print(e) # !!!
        await update.answer('–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –µ–º—É –±–æ–ª–µ–µ 48 —á–∞—Å–æ–≤, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.',
                            reply_markup=await kb.main_buttons(is_admin=await is_admin_silent(userid=update.from_user.id)))


async def cancel_edit(call: types.CallbackQuery, state: FSMContext):
    '''–§—É–Ω–∫—Ü–∏—è(—Ö—ç–Ω–¥–ª–µ—Ä) –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π'''
    try:
        await call.message.delete()
    finally:
        await state.clear()
        await call.message.answer('<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', reply_markup=await kb.main_buttons(is_admin=await is_admin_silent(userid=call.from_user.id)))
        await call.answer()


async def in_dev(call: types.CallbackQuery):
    "–§—É–Ω–∫—Ü–∏—è(—Ö–µ–Ω–¥–ª–µ—Ä)-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"
    await call.answer(text='–†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', show_alert=True)


async def other_text(message: types.Message):  # –£–¥–∞–ª—è–µ—Ç –≤—Å—ë —á—Ç–æ –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–æ –≤–≤–æ–¥–∞ –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç—É –º–µ–Ω—é
    await message.delete()
    if message.text: #await is_admin_silent(userid=message.from_user.id):
        request = message.text.lower().strip()
        if len(request) >= 3:
            names = await pets_names_list()
            result_list = []
            for pet in names:
                if request in pet[0]:
                    result_list.append(pet)
            if result_list:
                if len(result_list) == 1:
                    await message.answer_photo(photo=result_list[0][2], caption=f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∏—Ç–æ–º–µ—Ü –ø–æ –∏–º–µ–Ω–∏ <b>{result_list[0][0].capitalize()}</b>.', reply_markup=await kb.name_search_one_result(result_list=result_list))
                elif len(result_list) < 10:
                    msg = '\n'.join([f'{i + 1}. <i>{x[0].capitalize()}</i>' for i, x in enumerate(result_list)])
                    await message.answer_media_group(media=[types.InputMediaPhoto(media=item[2], caption=item[0].capitalize()) for item in result_list])
                    await message.answer(text='<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n' + msg, reply_markup=await kb.name_search_results(result_list=result_list), disable_notification=True)
                else:
                    await message.answer(text='<b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.</b>\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥–æ–º.</i>', reply_markup=await kb.main_buttons(is_admin=await is_admin_silent(message.from_user.id)))
            else:
                await message.answer('<b>–ü–∏—Ç–æ–º—Ü–µ–≤ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>\n<i>–ú–æ–∂–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥?</i>', reply_markup=await kb.main_buttons(is_admin=True))
        else:
            await message.answer('<b>–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ —Ç—Ä–µ—Ö –±—É–∫–≤.</b>\n <i>–õ–∏–±–æ –∂–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥–æ–º.</i>', reply_markup=await kb.main_buttons(is_admin=True))
    # else:
    #     await bot.send_message(message.from_user.id, '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.', reply_markup=await kb.main_buttons(is_admin=False))


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(hide_message, lambda call: call.data == 'hide')
    dp.callback_query.register(in_dev, lambda call: call.data == 'in_dev')
    dp.callback_query.register(cancel_edit, lambda call: call.data == 'cancelFSM')
    dp.message.register(other_text)

